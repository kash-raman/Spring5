package com.learn.spring5.demo.runner;


import com.learn.spring5.demo.config.BeanNamingConfiguration;
import com.learn.spring5.demo.ioc.example.BeanNamingConvension;
import com.learn.spring5.demo.ioc.example.NonStaticFactoryClass;
import com.learn.spring5.demo.ioc.example.StaticFactoryMethod;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.BeanCurrentlyInCreationException;
import org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContext;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.web.context.support.XmlWebApplicationContext;

import java.util.Arrays;

public class BeanRunnerTest {
    @Test
    public void testCyclicDependency() {
        try {
            ApplicationContext context = new ClassPathXmlApplicationContext("cyclic-Dependency.xml");
            Assert.fail();

        } catch (Exception e) {
            if (ExceptionUtils.getRootCause(e) instanceof BeanCurrentlyInCreationException)
                Assert.assertTrue(true);
            else
                Assert.fail();
        }
    }

    @Test
    public void testInnerClassBeanNamingConversion() {
        ApplicationContext context = new ClassPathXmlApplicationContext("bean-naming-context.xml");
        String[] beanNames = context.getBeanDefinitionNames();
        System.out.println(Arrays.asList(beanNames));
    }

    @Test
    public void testBeanNamingConversion() {
        ApplicationContext context = new ClassPathXmlApplicationContext("bean-naming-context.xml");
        String[] beanNames = context.getBeanNamesForType(BeanNamingConvension.class);
        System.out.println(Arrays.asList(beanNames));
        Assert.assertTrue(beanNames.length == 5);
    }

    @Test
    public void testBeanNamingConversion_autogenerated() {
        ApplicationContext context = new ClassPathXmlApplicationContext("bean-naming-context.xml");
        String[] beanNames = context.getBeanNamesForType(BeanNamingConvension.class);
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("com.learn.spring5.demo.ioc.example.BeanNamingConvension#0"::contains));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("com.learn.spring5.demo.ioc.example.BeanNamingConvension#1"::contains));
    }

    @Test
    public void testBeanNamingConversion_givenId() {
        ApplicationContext context = new ClassPathXmlApplicationContext("bean-naming-context.xml");
        String[] beanNames = context.getBeanNamesForType(BeanNamingConvension.class);
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("givenId"::contains));
        Assert.assertTrue(Arrays.stream(context.getAliases("givenId")).anyMatch("testGivenId"::contains));
    }

    @Test
    public void testBeanNamingConversion_namedID() {
        ApplicationContext context = new FileSystemXmlApplicationContext("classpath:bean-naming-context.xml");
        String[] beanNames = context.getBeanNamesForType(BeanNamingConvension.class);
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("namedId"::contains));
        Assert.assertFalse(Arrays.stream(beanNames).anyMatch("secondName"::contains));
        Assert.assertFalse(Arrays.stream(beanNames).anyMatch("afterSemi"::contains));
        String[] alias = context.getAliases("namedId");
        System.out.println(Arrays.asList(alias));
        Assert.assertTrue(Arrays.stream(alias).anyMatch("secondName"::contains));
        Assert.assertTrue(Arrays.stream(alias).anyMatch("afterSemi:afterColan"::contains));
        Assert.assertTrue(Arrays.stream(alias).anyMatch("afterComma"::contains));
        Assert.assertTrue(Arrays.stream(alias).anyMatch("namedSpace"::contains));
    }

    @Test
    public void testJavaBeanNamingConversion() {
        ApplicationContext context = new AnnotationConfigApplicationContext(BeanNamingConfiguration.class);
        String[] beanNames = context.getBeanNamesForType(BeanNamingConvension.class);
        System.out.println("lasdfsadf::::" + Arrays.asList(beanNames));
        Assert.assertTrue(beanNames.length == 8);
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("namedId"::contains));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("beanedId"::contains));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("beanedAnother"::contains));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("beanParamId"::contains));


    }

    @Test
    public void testJavaBeanNamingPrivate() {
        ApplicationContext context = new AnnotationConfigApplicationContext(BeanNamingConfiguration.class);
        String[] beanNames = context.getBeanNamesForType(StaticFactoryMethod.class);
        System.out.println(Arrays.asList(beanNames));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("clientService0"::contains));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("clientService"::contains));
        Assert.assertTrue(Arrays.stream(beanNames).anyMatch("factoryMethod"::contains));
    }

    @Test
    public void testFactory() {
        ApplicationContext context = new AnnotationConfigApplicationContext(BeanNamingConfiguration.class);
        String[] beanNames = context.getBeanNamesForType(NonStaticFactoryClass.class);
        System.out.println(Arrays.asList(beanNames));

    }

    @Test
    public void ApplicationContext() {
        ApplicationContext context = new XmlWebApplicationContext();
        ApplicationContext applicationContext = new XmlServletWebServerApplicationContext();
        ApplicationContext ctx = new ClassPathXmlApplicationContext();
        ((ClassPathXmlApplicationContext) ctx).afterPropertiesSet();

    }
}
